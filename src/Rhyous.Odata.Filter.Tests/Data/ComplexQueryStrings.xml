<?xml version="1.0" encoding="utf-8" ?>
<Rows xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:x="urn:Row">
  <!-- Schema -->
  <xsd:schema targetNamespace="urn:Row" attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xsd="http://www.w3.org/2001/XMLSchema" >
    <xsd:element name="Row">
      <xsd:complexType>
        <xsd:sequence>
          <xsd:element type="xsd:string" name="Query"/>
          <xsd:element type="xsd:string" name="ExpectedExpression"/>
          <xsd:element type="xsd:string" name="Message"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <!--End Schema-->
  <!--String value has quoted string -->
  <x:Row>
    <x:Query>Name eq 'Jared Barneck'</x:Query>
    <x:ExpectedExpression>e => (e.Name == "Jared Barneck")</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}.</x:Message>
  </x:Row>
   <!--Or--> 
  <x:Row>
    <x:Query>Name eq 'Jared Barneck' or Name eq 'Jared Abram Barneck'</x:Query>
    <x:ExpectedExpression>e => ((e.Name == "Jared Barneck") OrElse (e.Name == "Jared Abram Barneck"))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}.</x:Message>
  </x:Row>
   <!--And--> 
  <x:Row>
    <x:Query>Id eq 1 and Name eq 'Jared Barneck'</x:Query>
    <x:ExpectedExpression>e => ((e.Id == 1) AndAlso (e.Name == "Jared Barneck"))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}.</x:Message>
  </x:Row>
   <!--And then Or  no paranthesis--> 
  <x:Row>
    <x:Query>Id eq 1 and Name eq 'Jared Barneck' or Name eq 'Jared Abram Barneck'</x:Query>
    <x:ExpectedExpression>e => (((e.Id == 1) AndAlso (e.Name == "Jared Barneck")) OrElse (e.Name == "Jared Abram Barneck"))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. This expression is correct, but the logic, due to the lack of paranethesis is probably wrong.</x:Message>
  </x:Row>
  <!-- Or then And no paranthesis-->
  <x:Row>
    <x:Query>Name eq 'Jared Barneck' or Name eq 'Jared Abram Barneck' and Id eq 1</x:Query>
    <x:ExpectedExpression>e => ((e.Name == "Jared Barneck") OrElse ((e.Name == "Jared Abram Barneck") AndAlso (e.Id == 1)))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. This is to test AND has precendence. The expression is correctly built according to precedence, but inpput logic, due to the lack of paranethesis, is probably wrong.</x:Message>
  </x:Row>
  <!-- Or with a string method-->
  <x:Row>
    <x:Query>Name eq 'Jared Barneck' or contains(Name, 'Jared') and Id eq 1</x:Query>
    <x:ExpectedExpression>e => ((e.Name == "Jared Barneck") OrElse (e.Name.Contains("Jared") AndAlso (e.Id == 1)))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. This is to test AND has precendence. The expression is correctly built according to precedence, but inpput logic, due to the lack of paranethesis, is probably wrong.</x:Message>
  </x:Row>
  <x:Row>
    <x:Query>Id eq 1 and Name eq Jared or Id eq 2 and Name eq Elih</x:Query>
    <x:ExpectedExpression>e => (((e.Id == 1) AndAlso (e.Name == "Jared")) OrElse ((e.Id == 2) AndAlso (e.Name == "Elih")))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}.</x:Message>
  </x:Row>
  <x:Row>
    <x:Query>Id eq 1 or Name eq Jared and Id eq 2 or Name eq Elih</x:Query>
    <x:ExpectedExpression>e => (((e.Id == 1) OrElse ((e.Name == "Jared") AndAlso (e.Id == 2))) OrElse (e.Name == "Elih"))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}.</x:Message>
  </x:Row>
</Rows>