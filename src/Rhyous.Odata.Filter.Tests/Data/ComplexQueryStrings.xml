<?xml version="1.0" encoding="utf-8" ?>
<Rows xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:x="urn:Row">
  <!-- Schema -->
  <xsd:schema targetNamespace="urn:Row" attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xsd="http://www.w3.org/2001/XMLSchema" >
    <xsd:element name="Row">
      <xsd:complexType>
        <xsd:sequence>
          <xsd:element type="xsd:string" name="Query"/>
          <xsd:element type="xsd:string" name="ExpectedExpression"/>
          <xsd:element type="xsd:string" name="Message"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <!--End Schema-->
  <!--String value has quoted string -->
  <x:Row>
    <x:Query>Name eq 'Jared Barneck'</x:Query>
    <x:ExpectedExpression>e => (e.Name == "Jared Barneck")</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. 1.</x:Message>
  </x:Row>
   <!--Or--> 
  <x:Row>
    <x:Query>Name eq 'Jared Barneck' or Name eq 'Jared Abram Barneck'</x:Query>
    <x:ExpectedExpression>e => ((e.Name == "Jared Barneck") OrElse (e.Name == "Jared Abram Barneck"))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. 2.</x:Message>
  </x:Row>
   <!--And--> 
  <x:Row>
    <x:Query>Id eq 1 and Name eq 'Jared Barneck'</x:Query>
    <x:ExpectedExpression>e => ((e.Id == 1) AndAlso (e.Name == "Jared Barneck"))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. 3.</x:Message>
  </x:Row>
   <!--And then Or  no paranthesis--> 
  <x:Row>
    <x:Query>Id eq 1 and Name eq 'Jared Barneck' or Name eq 'Jared Abram Barneck'</x:Query>
    <x:ExpectedExpression>e => (((e.Id == 1) AndAlso (e.Name == "Jared Barneck")) OrElse (e.Name == "Jared Abram Barneck"))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. 4.</x:Message>
  </x:Row>
  <!-- Or then And no paranthesis-->
  <x:Row>
    <x:Query>Name eq 'Jared Barneck' or Name eq 'Jared Abram Barneck' and Id eq 1</x:Query>
    <x:ExpectedExpression>e => ((e.Name == "Jared Barneck") OrElse ((e.Name == "Jared Abram Barneck") AndAlso (e.Id == 1)))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. This is to test AND has precendence. 5.</x:Message>
  </x:Row>
  <!-- Or with a string method-->
  <x:Row>
    <x:Query>Name eq 'Jared Barneck' or contains(Name, 'Jared') and Id eq 1</x:Query>
    <x:ExpectedExpression>e => ((e.Name == "Jared Barneck") OrElse (e.Name.Contains("Jared") AndAlso (e.Id == 1)))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. This is to test AND has precendence. 6.</x:Message>
  </x:Row>
  <x:Row>
    <x:Query>Id eq 1 and Name eq Jared or Id eq 2 and Name eq Elih</x:Query>
    <x:ExpectedExpression>e => (((e.Id == 1) AndAlso (e.Name == "Jared")) OrElse ((e.Id == 2) AndAlso (e.Name == "Elih")))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. 7.</x:Message>
  </x:Row>
  <x:Row>
    <x:Query>Id eq 1 or Name eq Jared and Id eq 2 or Name eq Elih</x:Query>
    <x:ExpectedExpression>e => (((e.Id == 1) OrElse ((e.Name == "Jared") AndAlso (e.Id == 2))) OrElse (e.Name == "Elih"))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. 8.</x:Message>
  </x:Row>

  
  <!--String value has embedded single quote -->
  <x:Row>
    <x:Query>Name eq 'O''Brien Barneck'</x:Query>
    <x:ExpectedExpression>e => (e.Name == "O'Brien Barneck")</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. 1.</x:Message>
  </x:Row>
  <!--Or-->
  <x:Row>
    <x:Query>Name eq 'O''Brien Barneck' or Name eq 'O''Brien Abram Barneck'</x:Query>
    <x:ExpectedExpression>e => ((e.Name == "O'Brien Barneck") OrElse (e.Name == "O'Brien Abram Barneck"))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. 2.</x:Message>
  </x:Row>
  <!--And-->
  <x:Row>
    <x:Query>Id eq 1 and Name eq 'O''Brien Barneck'</x:Query>
    <x:ExpectedExpression>e => ((e.Id == 1) AndAlso (e.Name == "O'Brien Barneck"))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. 3.</x:Message>
  </x:Row>
  <!--And then Or  no paranthesis-->
  <x:Row>
    <x:Query>Id eq 1 and Name eq 'O''Brien Barneck' or Name eq 'O''Brien Abram Barneck'</x:Query>
    <x:ExpectedExpression>e => (((e.Id == 1) AndAlso (e.Name == "O'Brien Barneck")) OrElse (e.Name == "O'Brien Abram Barneck"))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. 4.</x:Message>
  </x:Row>
  <!-- Or then And no paranthesis-->
  <x:Row>
    <x:Query>Name eq 'O''Brien Barneck' or Name eq 'O''Brien Abram Barneck' and Id eq 1</x:Query>
    <x:ExpectedExpression>e => ((e.Name == "O'Brien Barneck") OrElse ((e.Name == "O'Brien Abram Barneck") AndAlso (e.Id == 1)))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. This is to test AND has precendence. 5.</x:Message>
  </x:Row>
  <!-- Or with a string method-->
  <x:Row>
    <x:Query>Name eq 'O''Brien Barneck' or contains(Name, 'O''Brien') and Id eq 1</x:Query>
    <x:ExpectedExpression>e => ((e.Name == "O'Brien Barneck") OrElse (e.Name.Contains("O'Brien") AndAlso (e.Id == 1)))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. This is to test AND has precendence. 6.</x:Message>
  </x:Row>
  <x:Row>
    <x:Query>Id eq 1 and Name eq O''Brien or Id eq 2 and Name eq Elih</x:Query>
    <x:ExpectedExpression>e => (((e.Id == 1) AndAlso (e.Name == "O'Brien")) OrElse ((e.Id == 2) AndAlso (e.Name == "Elih")))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. 7.</x:Message>
  </x:Row>
  <x:Row>
    <x:Query>Id eq 1 or Name eq O''Brien and Id eq 2 or Name eq Elih</x:Query>
    <x:ExpectedExpression>e => (((e.Id == 1) OrElse ((e.Name == "O'Brien") AndAlso (e.Id == 2))) OrElse (e.Name == "Elih"))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. 8.</x:Message>
  </x:Row>
  

  <!--String value has embedded quotes escaped by two quotes -->
  <x:Row>
    <x:Query>Name eq 'Jared ""Rhyous"" Barneck'</x:Query>
    <x:ExpectedExpression>e => (e.Name == "Jared "Rhyous" Barneck")</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}.</x:Message>
  </x:Row>
  <!--Or-->
  <x:Row>
    <x:Query>Name eq 'Jared ""Rhyous"" Barneck' or Name eq 'Jared ""Rhyous"" Abram Barneck'</x:Query>
    <x:ExpectedExpression>e => ((e.Name == "Jared "Rhyous" Barneck") OrElse (e.Name == "Jared "Rhyous" Abram Barneck"))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}.</x:Message>
  </x:Row>
  <!--And-->
  <x:Row>
    <x:Query>Id eq 1 and Name eq 'Jared ""Rhyous"" Barneck'</x:Query>
    <x:ExpectedExpression>e => ((e.Id == 1) AndAlso (e.Name == "Jared "Rhyous" Barneck"))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}.</x:Message>
  </x:Row>
  <!--And then Or  no paranthesis-->
  <x:Row>
    <x:Query>Id eq 1 and Name eq 'Jared ""Rhyous"" Barneck' or Name eq 'Jared ""Rhyous"" Abram Barneck'</x:Query>
    <x:ExpectedExpression>e => (((e.Id == 1) AndAlso (e.Name == "Jared "Rhyous" Barneck")) OrElse (e.Name == "Jared "Rhyous" Abram Barneck"))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}.</x:Message>
  </x:Row>
  <!-- Or then And no paranthesis-->
  <x:Row>
    <x:Query>Name eq 'Jared ""Rhyous"" Barneck' or Name eq 'Jared ""Rhyous"" Abram Barneck' and Id eq 1</x:Query>
    <x:ExpectedExpression>e => ((e.Name == "Jared "Rhyous" Barneck") OrElse ((e.Name == "Jared "Rhyous" Abram Barneck") AndAlso (e.Id == 1)))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. This is to test AND has precendence.</x:Message>
  </x:Row>
  <!-- Or with a string method-->
  <x:Row>
    <x:Query>Name eq 'Jared ""Rhyous"" Barneck' or contains(Name, 'Jared') and Id eq 1</x:Query>
    <x:ExpectedExpression>e => ((e.Name == "Jared "Rhyous" Barneck") OrElse (e.Name.Contains("Jared") AndAlso (e.Id == 1)))</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. This is to test AND has precendence. </x:Message>
  </x:Row>


  <!--String value has starting quotes escaped by two quotes. Example: Company name: 'NStuff -->
  <x:Row>
    <x:Query>Name eq ''NStuff</x:Query>
    <x:ExpectedExpression>e => (e.Name == "'NStuff")</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. 1.</x:Message>
  </x:Row>
  <x:Row>
    <x:Query>Name eq '''NStuff'</x:Query>
    <x:ExpectedExpression>e => (e.Name == "'NStuff")</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. 2.</x:Message>
  </x:Row>
  <x:Row>
    <x:Query>Name eq "''NStuff"</x:Query>
    <x:ExpectedExpression>e => (e.Name == "'NStuff")</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. 3.</x:Message>
  </x:Row>


  <!--String value has starting quotes escaped by two quotes. Example: Company name: Runnin' -->
  <x:Row>
    <x:Query>Name eq Runnin''</x:Query>
    <x:ExpectedExpression>e => (e.Name == "Runnin'")</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. 1.</x:Message>
  </x:Row>
  <x:Row>
    <x:Query>Name eq 'Runnin'''</x:Query>
    <x:ExpectedExpression>e => (e.Name == "Runnin'")</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. 2.</x:Message>
  </x:Row>
  <x:Row>
    <x:Query>Name eq "Runnin''"</x:Query>
    <x:ExpectedExpression>e => (e.Name == "Runnin'")</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. 3.</x:Message>
  </x:Row>
  
  <!--String value has starting and ending quotes escaped by two quotes. Example: Company name: Runnin' -->
  <x:Row>
    <x:Query>Name eq ''Runnin''</x:Query>
    <x:ExpectedExpression>e => (e.Name == "'Runnin'")</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. 1.</x:Message>
  </x:Row>
  <x:Row>
    <x:Query>Name eq '''Runnin'''</x:Query>
    <x:ExpectedExpression>e => (e.Name == "'Runnin'")</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. 2.</x:Message>
  </x:Row>
  <x:Row>
    <x:Query>Name eq "''Runnin''"</x:Query>
    <x:ExpectedExpression>e => (e.Name == "'Runnin'")</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. 3.</x:Message>
  </x:Row>
  

<!--Entire expression quoted-->
  <x:Row>
    <x:Query>"Name eq 'Marco Polo'"</x:Query>
    <x:ExpectedExpression>e => (e.Name == "Marco Polo")</x:ExpectedExpression>
    <x:Message>Expression should result in this expression: {0}. 1. The quotes around the entire expression are removed.</x:Message>
  </x:Row>
</Rows>